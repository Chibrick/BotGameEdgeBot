import os
import asyncio
import logging
import gspread
import json
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from oauth2client.service_account import ServiceAccountCredentials
import traceback
from aiohttp import web

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MSK = timezone(timedelta(hours=3))

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# Google Sheets
client = None
sheet_clients = None
sheet_logs = None

async def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global client, sheet_clients, sheet_logs
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive"
        ]
        creds_json = os.getenv("GOOGLE_CREDENTIALS")
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)

        spreadsheet = client.open_by_url(
            "https://docs.google.com/spreadsheets/d/1pGc9kdpdFggwZlc3wairUBunou1BW_fw-D-heBViHic/edit#gid=0"
        )
        sheet_clients = spreadsheet.worksheet("–ö–ª–∏–µ–Ω—Ç—ã - –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏")
        sheet_logs = spreadsheet.worksheet("–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞")

        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return False


async def update_client(user: types.User, phone="", location="", offer="", status="", ref=""):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    if not sheet_clients:
        return False
    try:
        loop = asyncio.get_event_loop()
        all_values = await loop.run_in_executor(None, sheet_clients.get_all_values)

        user_id = str(user.id)
        row_index = None
        for i, row in enumerate(all_values, start=2):  # —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (1-—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
            if row and len(row) > 1 and row[1] == user_id:
                row_index = i
                break

        if row_index:
            # === –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å ===
            if phone:
                sheet_clients.update_cell(row_index, 5, phone)      # E
            if location:
                sheet_clients.update_cell(row_index, 6, location)   # F
            if ref:
                sheet_clients.update_cell(row_index, 7, ref)        # G
            if offer:
                sheet_clients.update_cell(row_index, 8, offer)      # H
            if status:
                sheet_clients.update_cell(row_index, 16, status)    # P
            await loop.run_in_executor(None, lambda: sheet_clients.update_cell(row_index, 17, datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S"))) # Q
        else:
            # === —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å ===
            new_row = [
                len(all_values),            # ‚Ññ –∫–ª–∏–µ–Ω—Ç–∞ (A) = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                user_id,                    # B
                user.username or "",        # C
                user.first_name or "",      # D
                phone,                      # E
                location,                   # F
                ref,                        # G
                offer,                      # H
                "", "", "", "", "", "", "", # I‚ÄìO —á–µ–∫–±–æ–∫—Å—ã
                status or "–Ω–æ–≤—ã–π",          # P
                datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")  # Q
            ]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ –≤ –Ω—É–∂–Ω—ã–µ —è—á–µ–π–∫–∏
            range_name = f"A{next_row}:AA{next_row}"
        
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É
            def update_sheet():
                sheet_clients.update(range_name, [new_row], value_input_option='USER_ENTERED')

            await loop.run_in_executor(None, update_sheet)

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


async def log_event(user: types.User, event_type: str, content: str):
    """–õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ"""
    if not sheet_logs:
        return False
    try:
        now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
        row_data = [
            now,
            str(user.id),
            user.username or "",
            user.first_name or "",
            user.last_name or "",
            event_type,
            content[:200]
        ]
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, lambda: sheet_logs.append_row(row_data, value_input_option="USER_ENTERED"))
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
        return False

# === –°—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    ref = "–±–µ–∑_–º–µ—Ç–∫–∏"
    if len(message.text.split()) > 1:
        ref = message.text.split()[1]

    await update_client(message.from_user, status="–Ω–æ–≤—ã–π")
    await log_event(message.from_user, "START", ref)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb
    )

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
@dp.message(F.contact)
async def get_phone(message: types.Message):
    phone = message.contact.phone_number
    await update_client(message.from_user, phone=phone)
    await log_event(message.from_user, "PHONE", phone)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True
    )
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
@dp.message(F.location)
async def get_location(message: types.Message):
    loc = f"{message.location.latitude},{message.location.longitude}"
    await update_client(message.from_user, location=loc)
    await log_event(message.from_user, "LOCATION", loc)

    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")]
    ])
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –í—ã–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã –∏ –æ—Ñ—Ñ–µ—Ä—ã üëá",
        reply_markup=keyboard
    )

# === –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ ===
@dp.callback_query(F.data == "bonus")
async def step_bonus(callback: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞", callback_data="offer_debit")],
        [InlineKeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="offer_credit")],
        [InlineKeyboardButton(text="üé≤ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–ö", callback_data="offer_bk")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ñ—Ñ–µ—Ä–∞:", reply_markup=kb)
    await log_event(callback.from_user, "BTN", "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

# === –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–æ–≤ ===
@dp.callback_query(F.data.startswith("offer_"))
async def choose_offer(callback: types.CallbackQuery):
    cat = callback.data.split("_", 1)[1]
    await update_client(callback.from_user, offer=cat, status="–æ—Ñ—Ñ–µ—Ä –≤—ã–±—Ä–∞–Ω")
    await log_event(callback.from_user, "OFFER", cat)

    await callback.message.answer(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}. –î–∞–ª—å—à–µ —è –≤—ã–¥–∞–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await callback.answer()

@dp.message(Command("force_reset"))
async def force_reset(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å webhook –∏ –æ—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await message.answer("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω, –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
        logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ: {e}")

# === Healthcheck –¥–ª—è Render ===
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_web_server():
    port = int(os.environ.get("PORT", 10000))
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# === Main ===
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_google_sheets()
    asyncio.create_task(start_web_server())
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
