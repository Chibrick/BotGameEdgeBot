import os
import asyncio
import logging
import gspread
import json
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from oauth2client.service_account import ServiceAccountCredentials
import traceback
from aiohttp import web

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MSK = timezone(timedelta(hours=3))

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# Google Sheets
client = None
sheet_clients = None   # "–ö–ª–∏–µ–Ω—Ç—ã - –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏"
sheet_logs = None      # "–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–ª-–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏ –∏–Ω–¥–µ–∫—Å—ã (A..Q)
NUM_COLUMNS = 17
IDX_CLIENT_NO = 1   # A
IDX_USER_ID = 2     # B
IDX_USERNAME = 3    # C
IDX_FIRST_NAME = 4  # D
IDX_PHONE = 5       # E
IDX_LOCATION = 6    # F
IDX_MARK = 7        # G
IDX_OFFER_NO = 8    # H
# I..O = 9..15 (—á–µ–∫–±–æ–∫—Å—ã –æ—Ñ—Ñ–µ—Ä–æ–≤)
IDX_STATUS = 16     # P
IDX_DATE = 17       # Q

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1pGc9kdpdFggwZlc3wairUBunou1BW_fw-D-heBViHic/edit#gid=0"


async def run_in_executor(fn, *args, **kwargs):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, lambda: fn(*args, **kwargs))


async def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global client, sheet_clients, sheet_logs
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive"
        ]
        creds_json = os.getenv("GOOGLE_CREDENTIALS")
        if not creds_json:
            logger.error("GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return False
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)

        spreadsheet = await run_in_executor(client.open_by_url, SPREADSHEET_URL)
        sheet_clients = spreadsheet.worksheet("–ö–ª–∏–µ–Ω—Ç—ã - –ü–∞—Ä—Ç–Ω–µ—Ä–∫–∏")
        sheet_logs = spreadsheet.worksheet("–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞")

        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        logger.error(traceback.format_exc())
        return False


def _pad_row(row, length):
    """Pad list to exact length"""
    if row is None:
        row = []
    row = list(row)
    if len(row) < length:
        row += [""] * (length - len(row))
    else:
        row = row[:length]
    return row


async def find_user_row_by_id(user_id: str):
    """–ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–æ–º–µ—Ä) –ø–æ user_id –≤ –∫–æ–ª–æ–Ω–∫–µ B. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"""
    if not sheet_clients:
        return None
    try:
        col_vals = await run_in_executor(sheet_clients.col_values, IDX_USER_ID)
        # col_values returns list with header as first element usually
        for i, v in enumerate(col_vals, start=1):
            if v == user_id:
                return i
        return None
    except Exception as e:
        logger.error(f"find_user_row_by_id error: {e}")
        return None


async def update_client(user: types.User, phone="", location="", offer="", status="", mark="", offer_no=""):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–ª–∏–µ–Ω—Ç–∞ (A..Q).
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –¥–∏–∞–ø–∞–∑–æ–Ω A{row}:Q{row}.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ A{next_row}:Q{next_row}.
    """
    if not sheet_clients:
        logger.error("sheet_clients –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    try:
        user_id = str(user.id)
        row_index = await find_user_row_by_id(user_id)

        if row_index:
            # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏
            row_vals = await run_in_executor(sheet_clients.row_values, row_index)
            row_vals = _pad_row(row_vals, NUM_COLUMNS)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
            if user.username:
                row_vals[IDX_USERNAME - 1] = user.username
            if user.first_name:
                row_vals[IDX_FIRST_NAME - 1] = user.first_name
            if phone:
                row_vals[IDX_PHONE - 1] = phone
            if location:
                row_vals[IDX_LOCATION - 1] = location
            if mark:
                row_vals[IDX_MARK - 1] = mark
            if offer_no:
                row_vals[IDX_OFFER_NO - 1] = offer_no
            if offer:
                # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä –≤ H (‚Ññ –æ—Ñ—Ñ–µ—Ä–∞) –∏/–∏–ª–∏ –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫–∏ I..O
                # –ø—Ä–æ—â–µ: –µ—Å–ª–∏ H –ø—É—Å—Ç ‚Äî –ø–∏—à–µ–º offer, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
                if not row_vals[IDX_OFFER_NO - 1]:
                    row_vals[IDX_OFFER_NO - 1] = offer
                else:
                    # —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ H —á–µ—Ä–µ–∑ ;
                    if offer not in row_vals[IDX_OFFER_NO - 1]:
                        row_vals[IDX_OFFER_NO - 1] = f"{row_vals[IDX_OFFER_NO - 1]};{offer}"

            if status:
                row_vals[IDX_STATUS - 1] = status

            row_vals[IDX_DATE - 1] = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")

            range_name = f"A{row_index}:Q{row_index}"
            await run_in_executor(sheet_clients.update, range_name, [row_vals], {'valueInputOption': 'USER_ENTERED'})
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_index} –¥–ª—è user {user_id}")
        else:
            # –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
            all_values = await run_in_executor(sheet_clients.get_all_values)
            next_row = len(all_values) + 1  # next available row index

            client_no = next_row - 1  # –ø–µ—Ä–≤—ã–π data row will be 1 if header exists
            new_row = [""] * NUM_COLUMNS
            new_row[IDX_CLIENT_NO - 1] = str(client_no)
            new_row[IDX_USER_ID - 1] = user_id
            new_row[IDX_USERNAME - 1] = user.username or ""
            new_row[IDX_FIRST_NAME - 1] = user.first_name or ""
            new_row[IDX_PHONE - 1] = phone or ""
            new_row[IDX_LOCATION - 1] = location or ""
            new_row[IDX_MARK - 1] = mark or ""
            new_row[IDX_OFFER_NO - 1] = offer_no or offer or ""
            # I..O checkboxes left empty
            new_row[IDX_STATUS - 1] = status or "–Ω–æ–≤—ã–π"
            new_row[IDX_DATE - 1] = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")

            range_name = f"A{next_row}:Q{next_row}"
            await run_in_executor(sheet_clients.update, range_name, [new_row], {'valueInputOption': 'USER_ENTERED'})
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ {next_row} –¥–ª—è user {user_id}")

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ update_client: {e}")
        logger.error(traceback.format_exc())
        return False


async def log_event(user: types.User, event_type: str, content: str):
    """–ó–∞–ø–∏—Å—å –≤ –ª–∏—Å—Ç '–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞'"""
    if not sheet_logs:
        logger.error("‚ùå sheet_logs –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    try:
        now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
        row = [
            now,
            str(user.id),
            user.username or "",
            user.first_name or "",
            user.last_name or "",
            event_type,
            content[:300]
        ]
        await run_in_executor(lambda: sheet_logs.append_row(row, value_input_option="USER_ENTERED"))
        logger.info(f"‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω: {event_type} –¥–ª—è {user.id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ log_event: {e}")
        logger.error(traceback.format_exc())
        return False


# === Handlers ===

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    ref = "–±–µ–∑_–º–µ—Ç–∫–∏"
    if len(message.text.split()) > 1:
        ref = message.text.split()[1]

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–∏—à–µ–º –ª–æ–≥
    await update_client(message.from_user, status="–Ω–æ–≤—ã–π", mark=ref)
    await log_event(message.from_user, "START", ref)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True
    )
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=kb
    )


@dp.message(F.contact)
async def get_phone(message: types.Message):
    try:
        phone = message.contact.phone_number
    except Exception:
        phone = message.text.strip()
    await update_client(message.from_user, phone=phone)
    await log_event(message.from_user, "PHONE", phone)

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True
    )
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)


@dp.message(F.location)
async def get_location(message: types.Message):
    loc = f"{message.location.latitude},{message.location.longitude}"
    await update_client(message.from_user, location=loc)
    await log_event(message.from_user, "LOCATION", loc)

    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")]
    ])
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –í—ã–±–∏—Ä–∞–π –±–æ–Ω—É—Å—ã –∏ –æ—Ñ—Ñ–µ—Ä—ã üëá",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "why_free")
async def why_free(callback: types.CallbackQuery):
    await log_event(callback.from_user, "BTN", "why_free")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üí° –°–µ–∫—Ä–µ—Ç –ø—Ä–æ—Å—Ç–æ–π:\n"
        "‚Äì –¢—ã –∏–≥—Ä–∞–µ—à—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∞–º.\n"
        "‚Äì –≠–∫—Å–ø–µ—Ä—Ç –¥–∞—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∏ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å.\n\n"
        "üëâ –ü–æ—ç—Ç–æ–º—É –Ω–∞–º –≤—ã–≥–æ–¥–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –≤—ã–∏–≥—Ä—ã–≤–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–ª—Å—è —Å –Ω–∞–º–∏ üëç",
        reply_markup=kb
    )


@dp.callback_query(F.data.in_(["step_bk", "bonus"]))
async def step_bk(callback: types.CallbackQuery):
    await log_event(callback.from_user, "BTN", "step_bk/bonus")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó Fonbet - –ë–æ–Ω—É—Å 1–∫", callback_data="bk_Fonbet")],
        [InlineKeyboardButton(text="üîó 1xBet - –ë–æ–Ω—É—Å 2–∫", callback_data="bk_1xbet")],
        [InlineKeyboardButton(text="üîó Pari - –ë–æ–Ω—É—Å 5–∫", callback_data="bk_Pari")],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç—ã", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –ë–ö –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.\n"
        "‚ö° –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "‚Äº –°–æ–≤–µ—Ç—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º.\n\n"
        "‚è≠ –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç–∞–º.",
        reply_markup=keyboard
    )


@dp.callback_query(F.data.startswith("bk_"))
async def on_bk_click(callback: types.CallbackQuery):
    bk_name = callback.data.split("_", 1)[1]
    await update_client(callback.from_user, offer=bk_name, status="–≤–∑—è–ª –æ—Ñ—Ñ–µ—Ä –ë–ö")
    await log_event(callback.from_user, "BK_CLICK", bk_name)

    # –∑–¥–µ—Å—å –≤–º–µ—Å—Ç–æ callback.message.edit_text - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
    # (—Ç–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Å—Å—ã–ª–∫—É –≤–Ω–∏–∑—É, –∞ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ edit)
    await callback.message.answer(
        f"üîó <b>{bk_name}</b> ‚Äî –≤–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:\nhttps://example.com/{bk_name}",
        parse_mode="HTML"
    )
    await callback.answer()


@dp.callback_query(F.data == "bonus")
async def show_categories(callback: types.CallbackQuery):
    await log_event(callback.from_user, "BTN", "bonus_menu")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞", callback_data="offer_debit")],
        [InlineKeyboardButton(text="üí≥ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="offer_credit")],
        [InlineKeyboardButton(text="üé≤ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–ö", callback_data="offer_bk")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ñ—Ñ–µ—Ä–∞:", reply_markup=kb)
    await callback.answer()


@dp.callback_query(F.data.startswith("offer_"))
async def choose_offer(callback: types.CallbackQuery):
    cat = callback.data.split("_", 1)[1]
    # –í H –º—ã –∑–∞–ø–∏—à–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–æ—Ñ—Ñ–µ—Ä–∞
    await update_client(callback.from_user, offer=cat, status="–æ—Ñ—Ñ–µ—Ä –≤—ã–±—Ä–∞–Ω")
    await log_event(callback.from_user, "OFFER", cat)
    await callback.message.answer(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {cat}. –î–∞–ª—å—à–µ —è –≤—ã–¥–∞–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await callback.answer()

@dp.message(Command("force_reset"))
async def force_reset(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å webhook –∏ –æ—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await message.answer("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω, –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
        logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ: {e}")

@dp.message(Command("test_log"))
async def test_log(message: types.Message):
    ok = await log_event(message.from_user, "TEST", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∏")
    if ok:
        await message.answer("‚úÖ –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞")

# Healthcheck –¥–ª—è Render
async def handle(request):
    return web.Response(text="I'm alive!")

async def start_web_server():
    port = int(os.environ.get("PORT", 10000))
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# Main
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    ok = await init_google_sheets()
    if not ok:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Sheets. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –±–µ–∑ –∑–∞–ø–∏—Å–∏.")
    # —Å—Ç–∞—Ä—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render healthcheck
    asyncio.create_task(start_web_server())
    await dp.start_polling(bot, drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
