import os
import asyncio
import logging
import gspread
import json
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable

load_dotenv()
try:
    creds_json = os.getenv("GOOGLE_CREDENTIALS")
    print("GOOGLE_CREDENTIALS found:", bool(creds_json))
    if creds_json:
        creds_dict = json.loads(creds_json)
        print("JSON parsed successfully")
        print("Client email:", creds_dict.get('client_email'))
except Exception as e:
    print("Error parsing GOOGLE_CREDENTIALS:", e)
    
API_TOKEN = os.getenv("API_TOKEN")

# —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
Expert_LINKS = {
    "Football": "https://t.me/assistantafrica",
    "Cybersport": "https://t.me/GS_Helps"
}

# –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ë–ö
BK_LINKS = {
    "Fonbet": "https://chibrick.github.io/Fonbet/",
    "1xbet": "https://chibrick.github.io/1xbet/",
    "Pari": "https://chibrick.github.io/Pari/"
}

logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö
MSK = timezone(timedelta(hours=3))

scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file",
         "https://www.googleapis.com/auth/drive"]

creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1HIrkvyNi0v_W3fW0Vbk4lmdspd1cwyCK4bSCwVuwIQQ/edit#gid=1138920267")
sheet = spreadsheet.worksheet("–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ –ª–∏—Å—Ç–∞

def log_to_google(user: types.User, event_type: str, content: str):
    now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([
        now,
        user.id,
        user.username or "",
        user.first_name or "",
        user.last_name or "",
        event_type,
        content
    ])

# === Middleware –¥–ª—è –ª–æ–≥–æ–≤ ===
class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            log_to_google(event.from_user, "MSG", event.text or "")
        elif isinstance(event, types.CallbackQuery):
            log_to_google(event.from_user, "BTN", event.data or "")
        return await handler(event, data)

dp.update.middleware(LoggingMiddleware())

# === –®–∞–≥ 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")]
    ])
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –±—É–∫–º–µ–∫–µ—Ä–æ–≤\n"
        "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å —á–∞—â–µ\n"
        "‚úÖ –û—Ç–∑—ã–≤—ã –∏ –æ—Ç—á–µ—Ç—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ—Ä–µ–Ω\n\n"
        "–í—ã–±–∏—Ä–∞–π –±–æ–Ω—É—Å –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è ‚¨áÔ∏è",
        reply_markup=keyboard
    )

# === –®–∞–≥ 2. –ü–æ—á–µ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ ===
@dp.callback_query(F.data == "why_free")
async def why_free(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üí° –°–µ–∫—Ä–µ—Ç –ø—Ä–æ—Å—Ç–æ–π:\n"
        "‚Äì –¢—ã –∏–≥—Ä–∞–µ—à—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å –ø–æ –Ω–∞—à–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º\n"
        "‚Äì –ú—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è –æ –º–∞—Ç—á–∞—Ö, –Ω–æ –Ω–µ –º–æ–∂–µ–º —Å—Ç–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å\n\n"
        "üëâ –ü–æ—ç—Ç–æ–º—É –Ω–∞–º –≤—ã–≥–æ–¥–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –≤—ã–∏–≥—Ä—ã–≤–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–ª—Å—è —Å –Ω–∞–º–∏ üëç",
        reply_markup=keyboard
    )

# === –®–∞–≥ 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–ö ===
@dp.callback_query(F.data.in_(["step_bk", "bonus"]))
async def step_bk(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    	[InlineKeyboardButton(text="üîó Fonbet - –ë–æ–Ω—É—Å 1–∫", url=BK_LINKS["Fonbet"])],
    	[InlineKeyboardButton(text="üîó 1xBet - –ë–æ–Ω—É—Å 2–∫", url=BK_LINKS["1xbet"])],
        [InlineKeyboardButton(text="üîó Pari - –ë–æ–Ω—É—Å 5–∫", url=BK_LINKS["Pari"])],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç—ã", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –ë–ö –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.\n"
        "‚ö° –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "‚Äº –°–æ–≤–µ—Ç—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º.\n\n"
        "‚è≠ –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç–∞–º.",
        reply_markup=keyboard
    )

# === –®–∞–≥ 4. –≠–∫—Å–ø–µ—Ä—Ç ===
@dp.callback_query(F.data == "step_expert")
async def step_expert(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ñ—É—Ç–±–æ–ª—É", url=Expert_LINKS["Football"])],
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—É", url=Expert_LINKS["Cybersport"])],
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")],
        [InlineKeyboardButton(text="üìå –°–æ–≤–µ—Ç—ã", callback_data="step_tips")]
    ])
    await callback.message.edit_text(
        "üéØ –ê –≤–æ—Ç –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.üìä\n"
        "–ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ—Å–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥–Ω–æ–∑–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.\n\n"
        "–ò–Ω–æ–≥–¥–∞ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –±—É–∫–º–µ–∫–µ—Ä–æ–≤, –ø–æ—ç—Ç–æ–º—É –∂–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞.\n"
        "–ò –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å—Ç–∞–≤–∏—Ç—å.\n",
        reply_markup=keyboard
    )

# === –®–∞–≥ 5. –°–æ–≤–µ—Ç—ã ===
@dp.callback_query(F.data == "step_tips")
async def step_tips(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è–ª", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "1Ô∏è. –°—Ç–∞–≤—å —Å–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã ‚Äî –≤–∞–∂–Ω–æ –ø—Ä–∏–≤—ã–∫–Ω—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–µ.\n"
        "2Ô∏è. –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É.\n"
        "3. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é/—Å–æ–≤–µ—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–≤–µ—Ä–∏–µ\n\n"
        "üëâ –¢–≤–æ–π –ø–ª—é—Å = –Ω–∞—à –ø–ª—é—Å üí™",
        reply_markup=keyboard
    )

# # === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
# @dp.callback_query(F.data == "done")
# async def done(callback: types.CallbackQuery):
#     await callback.message.edit_text("üöÄ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≥–æ—Ç–æ–≤ –∫ —Å—Ç–∞–≤–∫–∞–º! –£–¥–∞—á–∏ üçÄ")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
