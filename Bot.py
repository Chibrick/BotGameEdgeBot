import os
import asyncio
import logging
import gspread
import json
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable
import traceback
from aiohttp import web

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

user_choices = {}  # { user_id: {"bk": "", "expert": ""} }

# —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
EXPERTS = {
    "Football_Africa": {
        "name": "–≠–∫—Å–ø–µ—Ä—Ç",
        "link": "https://dzen.ru/?yredirect=true"
    },
    # "Cybersport_Gamesport": {
    #     "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—É",
    #     "link": "https://t.me/GS_Helps"
    # },
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Ç–∞–∫:
    # "Tennis_Pro": {"name": "—Ç–µ–Ω–Ω–∏—Å—É", "link": "https://t.me/tennis_channel"}
}

# –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ë–ö
BK_LINKS = {
    "1": "https://dzen.ru/?yredirect=true",
    "2": "https://dzen.ru/?yredirect=true",
    "3": "https://dzen.ru/?yredirect=true"
}

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
EVENT_TYPES = {
    "MSG": "–°–æ–æ–±—â–µ–Ω–∏–µ",
    "BTN": "–ö–Ω–æ–ø–∫–∞", 
    "BK_CLICK": "–ö–ª–∏–∫ –ø–æ –ë–ö",
    "EXPERT_CLICK": "–ö–ª–∏–∫ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç—É",
    "PHONE_REQUEST": "–ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    "LOCATION_REQUEST": "–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–∫–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
click_tracking = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö
MSK = timezone(timedelta(hours=3))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
client = None
sheet = None

async def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global client, sheet
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive"
        ]

        creds_json = os.getenv("GOOGLE_CREDENTIALS")
        if not creds_json:
            logger.error("GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return False
            
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        
        spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1HIrkvyNi0v_W3fW0Vbk4lmdspd1cwyCK4bSCwVuwIQQ/edit#gid=1138920267")
        sheet = spreadsheet.worksheet("–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞")
        
        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

def log_to_sheets(row_data: list):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        last_row = len(sheet.get_all_values()) + 1
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sheet.update(
            range_name=f"A{last_row}",
            values=[row_data],
            value_input_option="USER_ENTERED"
        )
        logger.info(f"–õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É {last_row}: {row_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

async def log_to_google_async(user: types.User, event_type: str, content: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        if not sheet:
            logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            return False
            
        now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        loop = asyncio.get_event_loop()
        all_values = await loop.run_in_executor(None, sheet.get_all_values)
        next_row = len(all_values) + 1
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            now,                   # A
            str(user.id),          # B  
            user.username or "",   # C
            user.first_name or "", # D
            user.last_name or "",  # E
            event_type,            # F
            content[:100],         # G
            "",                    # H phone
            ""                     # I location
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ –≤ –Ω—É–∂–Ω—ã–µ —è—á–µ–π–∫–∏
        range_name = f"A{next_row}:I{next_row}"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±: —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É
        def update_sheet():
            sheet.update(range_name, [row_data], value_input_option='USER_ENTERED')
        
        await loop.run_in_executor(None, update_sheet)
        
        logger.info(f"–õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω –≤ —Å—Ç—Ä–æ–∫—É {next_row}: {user.id} - {event_type}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

# === Middleware –¥–ª—è –ª–æ–≥–æ–≤ ===
class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = await handler(event, data)
        
        # –ü–æ—Ç–æ–º –ª–æ–≥–∏—Ä—É–µ–º (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É)
        try:
            if isinstance(event, types.Message):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id}: {event.text}")
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
                await log_to_google_async(event.from_user, "MSG", event.text or "")
                
            elif isinstance(event, types.CallbackQuery):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {event.from_user.id}: {event.data}")
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
                await log_to_google_async(event.from_user, "BTN", event.data or "")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ LoggingMiddleware: {e}")
            
        return result

dp.message.middleware(LoggingMiddleware())
dp.callback_query.middleware(LoggingMiddleware())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(callback: types.CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        if "message is not modified" in str(e):
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
            await callback.answer()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# === –®–∞–≥ 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message(F.text.startswith("/start"))
async def send_welcome(message: types.Message):
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    args = message.text.split(maxsplit=1)
    ref = args[1] if len(args) > 1 else "–±–µ–∑_–º–µ—Ç–∫–∏"

    now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
    user_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""

    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –º–µ—Ç–∫–æ–π: {ref}")

    # üìå –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    log_to_sheets([now, str(user_id), username, first_name, "", "START", "/start", "", "", ref])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–∞", callback_data="why_free")]
    ])
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=keyboard
    )

# === –®–∞–≥ 2. –ü–æ—á–µ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ ===
@dp.callback_query(F.data == "why_free")
async def why_free(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="bonus")],
        [InlineKeyboardButton(text="‚è≠ –¢–æ—á–∫–∞", callback_data="step_expert")]
    ])
    await safe_edit_message(
        callback,
        "üí° –°–µ–∫—Ä–µ—Ç –ø—Ä–æ—Å—Ç–æ–π:\n",
        keyboard
    )

# === –®–∞–≥ 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–ö ===
@dp.callback_query(F.data.in_(["step_bk", "bonus"]))
async def step_bk(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó 1", callback_data="bk_Fonbet")],
        [InlineKeyboardButton(text="üîó 2", callback_data="bk_1xbet")],
        [InlineKeyboardButton(text="üîó 3", callback_data="bk_Pari")],
        [InlineKeyboardButton(text="‚è≠ –¢–æ—á–∫–∞", callback_data="step_expert")]
    ])
    await safe_edit_message(
        callback,
        "üöÄ –†–∞–∫–µ—Ç–∞\n",
        keyboard
    )

@dp.callback_query(F.data.startswith("bk_"))
async def on_bk_click(callback: types.CallbackQuery):
    bk_name = callback.data.split("_", 1)[1]
    user_choices.setdefault(callback.from_user.id, {})["bk"] = bk_name

    # –õ–æ–≥–∏—Ä—É–µ–º
    # await log_to_google_async(callback.from_user, "BK_CLICK", bk_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ë–ö
    await callback.message.answer(
        f"üîó <b>{bk_name}</b> ‚Äî –≤–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞\n{BK_LINKS[bk_name]}", parse_mode="HTML"
    )
    await callback.answer()

# === –®–∞–≥ 4. –≠–∫—Å–ø–µ—Ä—Ç ===
@dp.callback_query(F.data == "step_expert")
async def step_expert(callback: types.CallbackQuery):
    # keyboard = InlineKeyboardMarkup(inline_keyboard=[
    #     [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—É—Ç–±–æ–ª—É", callback_data="exp_Football_Africa")],
    #     [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—É", callback_data="exp_Cybersport_Gamesport")],
    #     [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
    #     [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")],
    #     [InlineKeyboardButton(text="üìå –°–æ–≤–µ—Ç—ã", callback_data="step_tips")]
    # ])

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    expert_buttons = [
        [InlineKeyboardButton(text=f"üìä {data['name']}", callback_data=f"exp_{key}")]
        for key, data in EXPERTS.items()
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    extra_buttons = [
        [InlineKeyboardButton(text="üéÅ –°—é—Ä–ø—Ä–∏–∑", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–∞", callback_data="why_free")],
        [InlineKeyboardButton(text="üìå –°–æ–≤–µ—Ç—ã", callback_data="step_tips")]
    ]

    # –ò—Ç–æ–≥–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=expert_buttons + extra_buttons)

    await safe_edit_message(
        callback,
        "üéØ –ê –≤–æ—Ç –∏ –¢–æ—á–∫–∞üìä\n",
        keyboard
    )

@dp.callback_query(F.data.startswith("exp_"))
async def on_expert_click(callback: types.CallbackQuery):
    # –ü—Ä–∏–º–µ—Ä: exp_Football_Africa ‚Üí Football_Africa
    exp_key = callback.data.split("_", 1)[1]
    user_choices.setdefault(callback.from_user.id, {})["expert"] = exp_key
    # exp_name = callback.data.split("_", 1)[1]
    # user_choices.setdefault(callback.from_user.id, {})["expert"] = exp_name

    # –õ–æ–≥–∏—Ä—É–µ–º
    # await log_to_google_async(callback.from_user, "EXPERT_CLICK", exp_name)

    expert = EXPERTS.get(exp_key)
    if not expert:
        await callback.message.answer("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.answer(
        f"üìä <b>{EXPERTS[exp_key]['name']}</b>: {EXPERTS[exp_key]['link']}",
        parse_mode="HTML"
    )
    await callback.answer()

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    # await callback.message.answer(
    #     f"üìä –≠–∫—Å–ø–µ—Ä—Ç –ø–æ <b>{exp_name}</b>: {Expert_LINKS[exp_name]}"
    # )
    # await callback.answer()

# === –®–∞–≥ 5. –°–æ–≤–µ—Ç—ã ===
@dp.callback_query(F.data == "step_tips")
async def step_tips(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è–ª", callback_data="step_expert")]
    ])
    await safe_edit_message(
        callback,
        "‚ö†Ô∏è –°–æ–≤–µ—Ç—ã:\n",
        keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
@dp.message(Command("test_log"))
async def test_log(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"""
    result = await log_to_google_async(message.from_user, "TEST", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤")
    if result:
        await message.answer("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
@dp.message(Command("force_reset"))
async def force_reset(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å webhook –∏ –æ—á–∏—Å—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await message.answer("‚úÖ Webhook —Å–±—Ä–æ—à–µ–Ω, –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã –æ—á–∏—â–µ–Ω—ã!")
        logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Å–±—Ä–æ—Å–µ: {e}")

# Healthcheck –¥–ª—è Render.com
# async def health_check(request):
#     return web.Response(text="Bot is running!", status=200)

# async def start_webapp():
#     """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è healthcheck"""
#     app = web.Application()
#     app.router.add_get('/', health_check)
#     app.router.add_get('/health', health_check)
#     runner = web.AppRunner(app)
#     await runner.setup()


async def handle(request):
    return web.Response(text="I'm alive!")

async def start_web_server():
    port = int(os.environ.get("PORT", 10000))  # Render –ø–µ—Ä–µ–¥–∞—ë—Ç PORT
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")


#     port = int(os.getenv('PORT', 10000))
#     site = web.TCPSite(runner, '0.0.0.0', port)
#     await site.start()
#     logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è healthcheck (–í–ê–ñ–ù–û –¥–ª—è Render.com!)
        # runner = await start_webapp()
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = await bot.get_me()
            logger.info(f"–ë–æ—Ç –Ω–∞–π–¥–µ–Ω: {me.username} (ID: {me.id})")
            
            # –£–¥–∞–ª—è–µ–º webhook –∏ –≤—Å–µ pending updates
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, pending updates –æ—á–∏—â–µ–Ω—ã")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
        sheets_ok = await init_google_sheets()
        if not sheets_ok:
            logger.warning("Google Sheets –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ª–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (healthcheck)
        asyncio.create_task(start_web_server())

        logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
        await dp.start_polling(
            bot, 
            drop_pending_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        try:
            await bot.session.close()
        except:
            pass

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
