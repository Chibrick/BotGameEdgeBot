import os
import asyncio
import logging
import gspread
import json
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import F
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable
import traceback

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

# —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
Expert_LINKS = {
    "Football": "https://t.me/assistantafrica",
    "Cybersport": "https://t.me/GS_Helps"
}

# –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ë–ö
BK_LINKS = {
    "Fonbet": "https://chibrick.github.io/Fonbet/",
    "1xbet": "https://chibrick.github.io/1xbet/",
    "Pari": "https://chibrick.github.io/Pari/"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö
MSK = timezone(timedelta(hours=3))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
client = None
sheet = None

async def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global client, sheet
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive"
        ]

        creds_json = os.getenv("GOOGLE_CREDENTIALS")
        if not creds_json:
            logger.error("GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return False
            
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        
        spreadsheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1HIrkvyNi0v_W3fW0Vbk4lmdspd1cwyCK4bSCwVuwIQQ/edit#gid=1138920267")
        sheet = spreadsheet.worksheet("–õ–æ–≥–∏ –æ—Ç –±–æ—Ç–∞")
        
        logger.info("Google Sheets —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

async def log_to_google_async(user: types.User, event_type: str, content: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        if not sheet:
            logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            return False
            
        now = datetime.now(MSK).strftime("%Y-%m-%d %H:%M:%S")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            None, 
            sheet.append_row,
            [
                now,
                user.id,
                user.username or "",
                user.first_name or "",
                user.last_name or "",
                event_type,
                content
            ]
        )
        
        logger.info(f"–õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {user.id} - {event_type} - {content[:50]}...")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

# === Middleware –¥–ª—è –ª–æ–≥–æ–≤ ===
class LoggingMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            if isinstance(event, types.Message):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {event.from_user.id}: {event.text}")
                asyncio.create_task(log_to_google_async(event.from_user, "MSG", event.text or ""))
                
            elif isinstance(event, types.CallbackQuery):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {event.from_user.id}: {event.data}")
                asyncio.create_task(log_to_google_async(event.from_user, "BTN", event.data or ""))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ LoggingMiddleware: {e}")
            
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)

dp.update.middleware(LoggingMiddleware())

# === –®–∞–≥ 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")]
    ])
    await message.answer(
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n"
        "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –±—É–∫–º–µ–∫–µ—Ä–æ–≤\n"
        "‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å —á–∞—â–µ\n"
        "‚úÖ –û—Ç–∑—ã–≤—ã –∏ –æ—Ç—á–µ—Ç—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–≤–µ—Ä–µ–Ω\n\n"
        "–í—ã–±–∏—Ä–∞–π –±–æ–Ω—É—Å –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è ‚¨áÔ∏è",
        reply_markup=keyboard
    )

# === –®–∞–≥ 2. –ü–æ—á–µ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ ===
@dp.callback_query(F.data == "why_free")
async def why_free(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üí° –°–µ–∫—Ä–µ—Ç –ø—Ä–æ—Å—Ç–æ–π:\n"
        "‚Äì –¢—ã –∏–≥—Ä–∞–µ—à—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å –ø–æ –Ω–∞—à–∏–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º\n"
        "‚Äì –ú—ã –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º—Å—è –æ –º–∞—Ç—á–∞—Ö, –Ω–æ –Ω–µ –º–æ–∂–µ–º —Å—Ç–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∏–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å\n\n"
        "üëâ –ü–æ—ç—Ç–æ–º—É –Ω–∞–º –≤—ã–≥–æ–¥–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –≤—ã–∏–≥—Ä—ã–≤–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–ª—Å—è —Å –Ω–∞–º–∏ üëç",
        reply_markup=keyboard
    )

# === –®–∞–≥ 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–ö ===
@dp.callback_query(F.data.in_(["step_bk", "bonus"]))
async def step_bk(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    	[InlineKeyboardButton(text="üîó Fonbet - –ë–æ–Ω—É—Å 1–∫", url=BK_LINKS["Fonbet"])],
    	[InlineKeyboardButton(text="üîó 1xBet - –ë–æ–Ω—É—Å 2–∫", url=BK_LINKS["1xbet"])],
        [InlineKeyboardButton(text="üîó Pari - –ë–æ–Ω—É—Å 5–∫", url=BK_LINKS["Pari"])],
        [InlineKeyboardButton(text="‚è≠ –≠–∫—Å–ø–µ—Ä—Ç—ã", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –ë–ö –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π –±–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.\n"
        "‚ö° –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å.\n"
        "‚Äº –°–æ–≤–µ—Ç—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–æ–º–ø–∞–Ω–∏—è–º.\n\n"
        "‚è≠ –ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—à—å, –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç–∞–º.",
        reply_markup=keyboard
    )

# === –®–∞–≥ 4. –≠–∫—Å–ø–µ—Ä—Ç ===
@dp.callback_query(F.data == "step_expert")
async def step_expert(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ —Ñ—É—Ç–±–æ–ª—É", url=Expert_LINKS["Football"])],
        [InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—É", url=Expert_LINKS["Cybersport"])],
        [InlineKeyboardButton(text="üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å", callback_data="bonus")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ—á–µ–º—É –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?", callback_data="why_free")],
        [InlineKeyboardButton(text="üìå –°–æ–≤–µ—Ç—ã", callback_data="step_tips")]
    ])
    await callback.message.edit_text(
        "üéØ –ê –≤–æ—Ç –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.üìä\n"
        "–ü–µ—Ä–µ–π–¥–∏ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ—Å–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–≥–Ω–æ–∑–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.\n\n"
        "–ò–Ω–æ–≥–¥–∞ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç –±—É–∫–º–µ–∫–µ—Ä–æ–≤, –ø–æ—ç—Ç–æ–º—É –∂–¥–µ–º —Ç–µ–±—è —Å–Ω–æ–≤–∞.\n"
        "–ò –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å—Ç–∞–≤–∏—Ç—å.\n",
        reply_markup=keyboard
    )

# === –®–∞–≥ 5. –°–æ–≤–µ—Ç—ã ===
@dp.callback_query(F.data == "step_tips")
async def step_tips(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è–ª", callback_data="step_expert")]
    ])
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "1Ô∏è. –°—Ç–∞–≤—å —Å–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã ‚Äî –≤–∞–∂–Ω–æ –ø—Ä–∏–≤—ã–∫–Ω—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–µ.\n"
        "2Ô∏è. –î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å —Å—Ç–∞–≤–∫—É.\n"
        "3. –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é/—Å–æ–≤–µ—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–æ–≤–µ—Ä–∏–µ\n\n"
        "üëâ –¢–≤–æ–π –ø–ª—é—Å = –Ω–∞—à –ø–ª—é—Å üí™",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
@dp.message(Command("test_log"))
async def test_log(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"""
    result = await log_to_google_async(message.from_user, "TEST", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤")
    if result:
        await message.answer("‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ Google –¢–∞–±–ª–∏—Ü—É!")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    sheets_ok = await init_google_sheets()
    if not sheets_ok:
        logger.warning("Google Sheets –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ª–æ–≥–∏ –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!")
    
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
